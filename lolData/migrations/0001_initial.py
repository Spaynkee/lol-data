# Generated by Django 5.2.4 on 2025-08-06 23:39

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Champions',
            fields=[
                ('key', models.IntegerField(primary_key=True, serialize=False)),
                ('id', models.CharField(blank=True, max_length=30, null=True)),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('blurb', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'verbose_name': 'Champion',
                'verbose_name_plural': 'Champions',
                'db_table': 'champions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('key', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=60, null=True)),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'db_table': 'items',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='JsonData',
            fields=[
                ('match_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('json_data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'JSON Data',
                'verbose_name_plural': 'JSON Data',
                'db_table': 'json_data',
            },
        ),
        migrations.CreateModel(
            name='JsonTimeline',
            fields=[
                ('match_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('json_timeline', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'JSON Timeline',
                'verbose_name_plural': 'JSON Timelines',
                'db_table': 'json_timeline',
            },
        ),
        migrations.CreateModel(
            name='LeagueUsers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('summoner_name', models.CharField(blank=True, max_length=30, null=True)),
                ('riot_id', models.CharField(blank=True, max_length=400, null=True)),
                ('puuid', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'verbose_name': 'League User',
                'verbose_name_plural': 'League Users',
                'db_table': 'league_users',
            },
        ),
        migrations.CreateModel(
            name='MatchData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('match_id', models.BigIntegerField(blank=True, null=True)),
                ('player', models.CharField(blank=True, max_length=40, null=True)),
                ('role', models.CharField(blank=True, max_length=10, null=True)),
                ('champion', models.IntegerField(blank=True, null=True)),
                ('champion_name', models.CharField(blank=True, max_length=40, null=True)),
                ('enemy_champion', models.IntegerField(blank=True, null=True)),
                ('enemy_champion_name', models.CharField(blank=True, max_length=40, null=True)),
                ('first_blood', models.SmallIntegerField(blank=True, null=True)),
                ('first_blood_assist', models.SmallIntegerField(blank=True, null=True)),
                ('kills', models.IntegerField(blank=True, null=True)),
                ('deaths', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('damage_to_champs', models.IntegerField(blank=True, null=True)),
                ('damage_to_turrets', models.IntegerField(blank=True, null=True)),
                ('gold_per_minute', models.FloatField(blank=True, null=True)),
                ('creeps_per_minute', models.FloatField(blank=True, null=True)),
                ('xp_per_minute', models.FloatField(blank=True, null=True)),
                ('wards_placed', models.IntegerField(blank=True, null=True)),
                ('vision_wards_bought', models.IntegerField(blank=True, null=True)),
                ('wards_killed', models.IntegerField(blank=True, null=True)),
                ('items', models.CharField(blank=True, max_length=200, null=True)),
                ('perks', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Match Data',
                'verbose_name_plural': 'Match Data',
                'db_table': 'match_data',
            },
        ),
        migrations.CreateModel(
            name='ScriptRuns',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, choices=[('prod', 'Production'), ('test', 'Test'), ('manual', 'Manual')], max_length=50, null=True)),
                ('status', models.CharField(blank=True, choices=[('success', 'Success'), ('failure', 'Failure'), ('running', 'Running')], max_length=20, null=True)),
                ('matches_added', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('message', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name': 'Script Run',
                'verbose_name_plural': 'Script Runs',
                'db_table': 'script_runs',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TeamData',
            fields=[
                ('match_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('game_version', models.CharField(blank=True, max_length=40, null=True)),
                ('win', models.CharField(blank=True, max_length=10, null=True)),
                ('participants', models.CharField(blank=True, max_length=80, null=True)),
                ('first_blood', models.SmallIntegerField(blank=True, null=True)),
                ('first_baron', models.SmallIntegerField(blank=True, null=True)),
                ('first_tower', models.SmallIntegerField(blank=True, null=True)),
                ('first_dragon', models.SmallIntegerField(blank=True, null=True)),
                ('first_inhib', models.SmallIntegerField(blank=True, null=True)),
                ('first_rift_herald', models.SmallIntegerField(blank=True, null=True)),
                ('ally_dragon_kills', models.IntegerField(blank=True, null=True)),
                ('ally_rift_herald_kills', models.IntegerField(blank=True, null=True)),
                ('inhib_kills', models.IntegerField(blank=True, null=True)),
                ('bans', models.CharField(blank=True, max_length=80, null=True)),
                ('enemy_bans', models.CharField(blank=True, max_length=80, null=True)),
                ('allies', models.CharField(blank=True, max_length=80, null=True)),
                ('enemies', models.CharField(blank=True, max_length=80, null=True)),
                ('enemy_dragon_kills', models.IntegerField(blank=True, null=True)),
                ('enemy_rift_herald_kills', models.IntegerField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.TimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Team Data',
                'verbose_name_plural': 'Team Data',
                'db_table': 'team_data',
            },
        ),
        migrations.RunSQL(
            sql=[
                    "SELECT setval(pg_get_serial_sequence('league_users', 'id'), 7, false);",
                    "SELECT setval(pg_get_serial_sequence('match_data', 'id'), 17445, false);",
                    "SELECT setval(pg_get_serial_sequence('script_runs', 'id'), 1725, false);",
                ],
            reverse_sql=[
                    "SELECT setval(pg_get_serial_sequence('league_users', 'id'), 1, false);",
                    "SELECT setval(pg_get_serial_sequence('match_data', 'id'), 1, false);",
                    "SELECT setval(pg_get_serial_sequence('script_runs', 'id'), 1, false);",
            ]
        )
    ]
